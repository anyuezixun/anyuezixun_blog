name: Deploy Hugo site to Pages

on:
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.101.0'
          extended: true
      
      - name: Debug directory structure before theme setup
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Themes directory (before setup):"
          ls -la themes/ || echo "Themes directory does not exist"
          echo ".gitmodules content:"
          cat .gitmodules || echo ".gitmodules does not exist"
          echo "Config files:"
          find . -name "*.toml" -o -name "*.yaml" -o -name "*.yml" | grep -v "\.github"
      
      - name: Setup Hugo Theme
        run: |
          # Á°Æ‰øùthemesÁõÆÂΩïÂ≠òÂú®
          mkdir -p themes
          
          # Âº∫Âà∂Âà†Èô§Âπ∂ÈáçÊñ∞ÂÖãÈöÜ‰∏ªÈ¢ò
          echo "Removing existing theme directory if it exists..."
          rm -rf themes/hugo-theme-stack
          
          echo "Cloning Hugo theme Stack..."
          git clone --branch v3.16.0 https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack
          
          # È™åËØÅ‰∏ªÈ¢òÂÆâË£Ö
          echo "Theme directory structure:"
          ls -la themes/
          ls -la themes/hugo-theme-stack || echo "Failed to clone theme"
      
      - name: Create custom template override
        run: |
          mkdir -p layouts/partials/head/opengraph/provider
          echo '<meta property="og:title" content="{{ .Title }}" />' > layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:description" content="{{ with .Description }}{{ . }}{{ else }}{{ if .IsPage }}{{ .Summary }}{{ else }}{{ with .Site.Params.description }}{{ . }}{{ end }}{{ end }}{{ end }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:type" content="{{ if .IsPage }}article{{ else }}website{{ end }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:url" content="{{ .Permalink }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ with .Params.image }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:image" content="{{ . | absURL }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ else }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ with .Site.Params.og.image }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:image" content="{{ . | absURL }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ if .IsPage }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ if not .PublishDate.IsZero }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="article:published_time" content="{{ .PublishDate.Format "2006-01-02T15:04:05-07:00" | safeHTML }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ else if not .Date.IsZero }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="article:published_time" content="{{ .Date.Format "2006-01-02T15:04:05-07:00" | safeHTML }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ if not .Lastmod.IsZero }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="article:modified_time" content="{{ .Lastmod.Format "2006-01-02T15:04:05-07:00" | safeHTML }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ else }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ if not .Date.IsZero }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:updated_time" content="{{ .Date.Format "2006-01-02T15:04:05-07:00" | safeHTML }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
      
      - name: Create Hugo config
        run: |
          # Ëé∑Âèñ‰ªìÂ∫ìÂêçÁß∞
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          echo "Repository name: $REPO_NAME"
          
          # ËÆæÁΩÆÂõ∫ÂÆöÁöÑbaseURL
          FIXED_BASE_URL="https://anyuezixun.github.io/$REPO_NAME/"
          echo "Using fixed baseURL: $FIXED_BASE_URL"
          
          # Âº∫Âà∂ÂàõÂª∫Êñ∞ÁöÑhugo.tomlÊñá‰ª∂
          echo "Creating hugo.toml file"
          echo "baseURL = \"$FIXED_BASE_URL\"" > hugo.toml
          echo "languageCode = \"zh-cn\"" >> hugo.toml
          echo "title = \"ÂÆâÊÇ¶Âí®ËØ¢AIÊé¢Á¥¢\"" >> hugo.toml
          echo "theme = \"hugo-theme-stack\"" >> hugo.toml
          echo "" >> hugo.toml
          echo "[params]" >> hugo.toml
          echo "  mainSections = [\"post\"]" >> hugo.toml
          echo "  featuredImageField = \"image\"" >> hugo.toml
          echo "  rssFullContent = true" >> hugo.toml
          echo "  favicon = \"/favicon.ico\"" >> hugo.toml
          echo "" >> hugo.toml
          echo "  [params.footer]" >> hugo.toml
          echo "    since = 2024" >> hugo.toml
          echo "    customText = \"ÂÆâÊÇ¶Âí®ËØ¢AIÊé¢Á¥¢\"" >> hugo.toml
          echo "" >> hugo.toml
          echo "  [params.dateFormat]" >> hugo.toml
          echo "    published = \"2006-01-02\"" >> hugo.toml
          echo "    lastUpdated = \"2006-01-02\"" >> hugo.toml
          echo "" >> hugo.toml
          echo "  [params.sidebar]" >> hugo.toml
          echo "    emoji = \"üöÄ\"" >> hugo.toml
          echo "    subtitle = \"Êé¢Á¥¢AIÊäÄÊúØÂâçÊ≤øÔºåÂä©Âäõ‰ºÅ‰∏öÊï∞Â≠óÂåñËΩ¨Âûã\"" >> hugo.toml
          echo "" >> hugo.toml
          echo "  [params.sidebar.avatar]" >> hugo.toml
          echo "    enabled = false" >> hugo.toml
          echo "" >> hugo.toml
          echo "  # Ê∑ªÂä†Á§æ‰∫§Â™í‰ΩìÈìæÊé•" >> hugo.toml
          echo "  [[params.social]]" >> hugo.toml
          echo "    identifier = \"github\"" >> hugo.toml
          echo "    name = \"GitHub\"" >> hugo.toml
          echo "    url = \"https://github.com/anyuezixun\"" >> hugo.toml
          echo "    params = { icon = \"brand-github\" }" >> hugo.toml
          echo "" >> hugo.toml
          echo "  [[params.social]]" >> hugo.toml
          echo "    identifier = \"twitter\"" >> hugo.toml
          echo "    name = \"Twitter\"" >> hugo.toml
          echo "    url = \"https://twitter.com/anyuezixun\"" >> hugo.toml
          echo "    params = { icon = \"brand-twitter\" }" >> hugo.toml
          echo "" >> hugo.toml
          echo "  [[params.social]]" >> hugo.toml
          echo "    identifier = \"linkedin\"" >> hugo.toml
          echo "    name = \"LinkedIn\"" >> hugo.toml
          echo "    url = \"https://linkedin.com/company/anyuezixun\"" >> hugo.toml
          echo "    params = { icon = \"brand-linkedin\" }" >> hugo.toml
          echo "" >> hugo.toml
          echo "[menu]" >> hugo.toml
          echo "  [[menu.main]]" >> hugo.toml
          echo "    identifier = \"home\"" >> hugo.toml
          echo "    name = \"È¶ñÈ°µ\"" >> hugo.toml
          echo "    url = \"/\"" >> hugo.toml
          echo "    weight = -100" >> hugo.toml
          echo "    params = { icon = \"home\" }" >> hugo.toml
          echo "" >> hugo.toml
          echo "  [[menu.main]]" >> hugo.toml
          echo "    identifier = \"about\"" >> hugo.toml
          echo "    name = \"ÂÖ≥‰∫é\"" >> hugo.toml
          echo "    url = \"/about\"" >> hugo.toml
          echo "    weight = -90" >> hugo.toml
          echo "    params = { icon = \"user\" }" >> hugo.toml
          echo "" >> hugo.toml
          echo "  [[menu.main]]" >> hugo.toml
          echo "    identifier = \"categories\"" >> hugo.toml
          echo "    name = \"ÂàÜÁ±ª\"" >> hugo.toml
          echo "    url = \"/categories\"" >> hugo.toml
          echo "    weight = -85" >> hugo.toml
          echo "    params = { icon = \"categories\" }" >> hugo.toml
          echo "" >> hugo.toml
          echo "  [[menu.main]]" >> hugo.toml
          echo "    identifier = \"tags\"" >> hugo.toml
          echo "    name = \"Ê†áÁ≠æ\"" >> hugo.toml
          echo "    url = \"/tags\"" >> hugo.toml
          echo "    weight = -80" >> hugo.toml
          echo "    params = { icon = \"tag\" }" >> hugo.toml
          echo "" >> hugo.toml
          echo "  [[menu.main]]" >> hugo.toml
          echo "    identifier = \"search\"" >> hugo.toml
          echo "    name = \"ÊêúÁ¥¢\"" >> hugo.toml
          echo "    url = \"/search\"" >> hugo.toml
          echo "    weight = -70" >> hugo.toml
          echo "    params = { icon = \"search\" }" >> hugo.toml
          
          echo "Content of hugo.toml:"
          cat hugo.toml
          
          # ÂàõÂª∫config.toml‰Ωú‰∏∫Â§á‰ªΩ
          cp hugo.toml config.toml
          echo "Created config.toml as backup"
      
      - name: Debug before Hugo build
        run: |
          echo "Complete directory structure before Hugo build:"
          find . -type f -not -path "*/\.*" | sort
          echo "Themes directory content:"
          find ./themes -type f | sort
          echo "Hugo environment:"
          hugo env
          echo "Working directory:"
          pwd
          echo "GitHub repository: $GITHUB_REPOSITORY"
          echo "GitHub Pages URL: https://anyuezixun.github.io/$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)/"
      
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      
      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo version
          # Ëé∑Âèñ‰ªìÂ∫ìÂêçÁß∞
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d'/' -f2)
          FIXED_BASE_URL="https://anyuezixun.github.io/$REPO_NAME/"
          echo "Building with fixed baseURL: $FIXED_BASE_URL"
          hugo \
            --gc \
            --minify \
            --baseURL "$FIXED_BASE_URL" \
            --themesDir themes \
            --verbose
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 