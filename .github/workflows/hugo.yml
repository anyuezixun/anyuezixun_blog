name: Deploy Hugo site to Pages

on:
  push:
    branches: ["master"]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

defaults:
  run:
    shell: bash

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - name: Setup Hugo
        uses: peaceiris/actions-hugo@v2
        with:
          hugo-version: '0.101.0'
          extended: true
      
      - name: Debug directory structure before theme setup
        run: |
          echo "Current directory structure:"
          ls -la
          echo "Themes directory (before setup):"
          ls -la themes/ || echo "Themes directory does not exist"
          echo ".gitmodules content:"
          cat .gitmodules || echo ".gitmodules does not exist"
      
      - name: Setup Hugo Theme
        run: |
          # 确保themes目录存在
          mkdir -p themes
          
          # 强制删除并重新克隆主题
          echo "Removing existing theme directory if it exists..."
          rm -rf themes/hugo-theme-stack
          
          echo "Cloning Hugo theme Stack..."
          git clone --branch v3.16.0 https://github.com/CaiJimmy/hugo-theme-stack.git themes/hugo-theme-stack
          
          # 验证主题安装
          echo "Theme directory structure:"
          ls -la themes/
          ls -la themes/hugo-theme-stack || echo "Failed to clone theme"
      
      - name: Create custom template override
        run: |
          mkdir -p layouts/partials/head/opengraph/provider
          echo '<meta property="og:title" content="{{ .Title }}" />' > layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:description" content="{{ with .Description }}{{ . }}{{ else }}{{ if .IsPage }}{{ .Summary }}{{ else }}{{ with .Site.Params.description }}{{ . }}{{ end }}{{ end }}{{ end }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:type" content="{{ if .IsPage }}article{{ else }}website{{ end }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:url" content="{{ .Permalink }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ with .Params.image }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:image" content="{{ . | absURL }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ else }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ with .Site.Params.og.image }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:image" content="{{ . | absURL }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ if .IsPage }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ if not .PublishDate.IsZero }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="article:published_time" content="{{ .PublishDate.Format "2006-01-02T15:04:05-07:00" | safeHTML }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ else if not .Date.IsZero }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="article:published_time" content="{{ .Date.Format "2006-01-02T15:04:05-07:00" | safeHTML }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ if not .Lastmod.IsZero }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="article:modified_time" content="{{ .Lastmod.Format "2006-01-02T15:04:05-07:00" | safeHTML }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ else }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ if not .Date.IsZero }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '<meta property="og:updated_time" content="{{ .Date.Format "2006-01-02T15:04:05-07:00" | safeHTML }}" />' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
          echo '{{ end }}' >> layouts/partials/head/opengraph/provider/base.html
      
      - name: Verify Hugo config
        run: |
          # 确保hugo.toml存在
          if [ ! -f "hugo.toml" ]; then
            echo "Creating default hugo.toml file"
            cat > hugo.toml << EOF
          baseURL = 'https://anyuezixun.github.io/anyuezixun_blog/'
          languageCode = 'zh-cn'
          title = '安悦咨询AI探索'
          theme = 'hugo-theme-stack'
          
          [params]
            mainSections = ['post']
            featuredImageField = 'image'
            rssFullContent = true
            favicon = '/favicon.ico'
          
            [params.footer]
              since = 2024
              customText = '安悦咨询AI探索'
          
            [params.dateFormat]
              published = "2006-01-02"
              lastUpdated = "2006-01-02"
          EOF
          else
            echo "hugo.toml already exists"
          fi
          
          echo "Content of hugo.toml:"
          cat hugo.toml
      
      - name: Debug before Hugo build
        run: |
          echo "Complete directory structure before Hugo build:"
          find . -type f -not -path "*/\.*" | sort
          echo "Themes directory content:"
          find ./themes -type f | sort
          echo "Hugo environment:"
          hugo env
      
      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4
      
      - name: Build with Hugo
        env:
          HUGO_ENVIRONMENT: production
          HUGO_ENV: production
        run: |
          hugo version
          echo "Building with baseURL: ${{ steps.pages.outputs.base_url }}"
          hugo \
            --gc \
            --minify \
            --baseURL "${{ steps.pages.outputs.base_url }}" \
            --themesDir themes \
            --verbose
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./public

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4 